













RHLib
Rev <0.12>– Last Edit: July 27, 2022
Author(s): 
RyanH



















 

1	Revision History

Date MM/DD/YY	Revision	Description	Editor	Magnitude
				
				
				
				
				

 
TABLE OF CONTENTS
1	REVISION HISTORY	2
2	OWNERSHIP	5
3	REFERENCE DOCUMENTS	5
4	ASSUMPTIONS	5
5	TERMINOLOGY	5
6	SCOPE OF TEST PLAN	6
7	DUT AND TESTBENCH BLOCK DIAGRAMS	7
7.1	DUT BLOCK DIAGRAM	7
7.2	TESTBENCH BLOCK DIAGRAM	8
8	DETAILS OF TEST BENCH	9
8.1	ENVIRONMENT	9
8.1.1	UVM Test	9
8.1.2	Env	9
8.1.3	Agent	9
8.1.4	Scoreboard	9
8.1.5	Virtual Sequencer	9
8.1.6	Functional Coverage	9
8.1.7	Randomization	9
8.2	MONITORS / CHECKERS	9
8.3	DRIVERS / SEQUENCERS	9
8.4	SCOREBOARDS	10
8.5	EXTERNAL (NOT DEVELOPED BY IP TEAM) UVCS	10
8.6	MODELS / BFMS	10
8.7	LOGGING / SCRIPTS	10
8.8	POWER-AWARE SIMULATIONS	11
8.9	DFX ORIENTED SIMULATIONS	11
9	TEST CASE GROUPS	12
9.1	REGISTER ACCESS TEST	12
9.2	MAILBOX TESTS	12
9.3	MASTER ID VIOLATION TESTS	12
9.4	PROT VIOLATION TESTS	13
9.5	INTERRUPT ASSERTION AND DEASSERTION	14
9.6	SOFT RESET VERIFICATION	14
9.7	TIMER TESTS	15
9.8	ROM TESTS	15
9.9	SRAM TESTS	15
9.10	CLOCK GATING	16
9.11	LIGHT AND DEEP SLEEP	16
9.12	HUB IF TESTS	16
9.13	SMNIF TESTS	17
9.14	DRM IF TESTS	17
9.15	DAP TESTS	17
9.16	JTAG TESTS	18
9.17	WATCHDOG TESTS	18
9.18	FIRMWARE TESTS	18
9.19	PERFORMANCE TESTS	18
9.20	DFP TESTS	19
10	MEGA IP/SOC DV CALLOUTS	20
11	OPEN ITEMS	20
12	TEST PLAN REVIEW NOTES	21
2	Overview

 
3	Application
3.1	libqueue
<TBD>
3.2	liboptions
3.2.1	setup support options
Options opt();
// setup switch type options
opt.switches(“help”,”-h|--help”,”help information”,false); 

// setup single param options
opt.single(“log”,“-l <log>|--log=<log>”,”specify log file”,”default.log”);

// set multiple param options, no default for multiple param option
opt.multiple(“files”,”-f <file>|--file=<file>”,”specify source files”);

// parse user options
opt.parseArgs(argc,argv);

3.2.2	check user options
// return true if user entered this opt, else return false, support for all types of options.
// prototype: bool operator() (const char* id);
opt(“help”);opt(“log”); 

// return param of single opts, if opt entered is not single, then return “”
// prototype: string* param(const char* id);
opt.param(“log”); 

// return params of multiple opt, if opt entered is not multiple, then return empty queue
// prototype: queue<string>* params(const char* id);
opt.params(“files”);



3.3	libregexp

RegExp re(“h[e|i]”); // supports [a|b], *, +
string    str(“hello”);
MatchData* md = re.match(&str); // if no match, then return MatchData* with count equals to 0.
if (md->count()) {
	int c = md->count(); // total matching counts
	string* pre  =md->preMatch(<index of count, default is 0>);
	string* post=md->postMatch(<index of count>);
	string* ma  = md->midMatch(<index of count>);
	int s = md->startPos(<index of count>); // the start position that first pattern matched
	int e = md->endPos(<index of count>);
}

 
4	Architecture

4.1	class Regexp
It’s a regular expression operating lib, by using which, users can easily process pattern search/match/replace.

4.2	class Queue
It’s a template supports storing many of different variable types and can be operated like a queue.
<TBD>
4.3	class String
4.3.1	struct Stringsplits
4.3.1.1	int num
4.3.1.2	char* sps[]
4.4	class Options
The Options class will be compiled to liboptions.so for using by other people.
4.4.1	fields
Queue<OptionItem*> opts
4.4.2	+switches
add switch type options, id is used for identify different options.
4.4.2.1	arg: id
4.4.2.2	arg: format
4.4.2.3	arg: desc
4.4.2.4	arg: default=false
the bool type to specify the default value of the switch.
4.4.3	procedures
•	search current opts queue, if find the existing id, then print warning and return immediately
•	String* fmt = new String(format);
•	Stringsplits* splits = fmt.split(‘|’) // Plus: string should support this
•	OptionItem* oi = new OptionItem(id);
•	for (int i=0; i<splits->num,i++) {oi->formats.push(splits->get(i));
•	
4.4.4	+single
declare an option with only one parameter available, multiple specifying this option will be overwritten by later one.
4.4.4.1	arg: id
used ot specify the identifier of this option. Basically it support const char*, because users are more likely to specify a supported option through like: options.single(“id”,”format”,”descp” … ).
Later it shall support string* as well.
4.4.4.2	arg: format
Specifying the format of the option, support multiple formats through ‘|’ flag. For example, format can be “-f|--file=|+file+”, the single “-\w+” indicates the parameter exists in next argv while “.*=|+” indicates the parameter exists within current argv.
This function support const char* of format for now. 
4.4.4.3	arg: desc
A const char* type to describe the option, which will be displayed while calling message of Options.
4.4.4.4	procedures
<TBD>
4.4.5	+multiple
declare an option with multiple parameters, multiple specifying of this option from command line will be stored into an array.
4.4.5.1	arg: id
4.4.5.2	arg: format
4.4.5.3	arg: desc
4.4.5.4	procedures
<TBD>
4.4.6	+parseArgs
parse the user options entered from command line.
4.4.7	+operator ()
API to get option values according to specified option id. This API will return a class object of stored OptionItem pointer. Mostly this API will be used like:
Options opt();
opt.single(“-f” …
opt.switches(“-h” …
opt(“-f”)->param()
if opt(“-h”)->actived() ….


4.4.7.1	arg: id
The option id.

4.5	class OptionItem
established for Options class, easy storing option information.
4.5.1	fields
4.5.1.1	string* id
identifier of this option, used to identify different options.
4.5.1.2	OptionType t
the enum type of variable indicates the option type, available values: switches/single/multiple.
4.5.1.3	Queue<string*> formats
stores formats of this option.
4.5.1.4	queue<string*> params
a queue to store parameters for single/multiple type options
4.5.1.5	bool active
a bool that indicates if this option is activated by command line, this field also apply for the switches options, for those kind of options, if user entered that option, then the active is true, or else it’s false.
4.5.2	+param(index=0)
return the specified index of parameter, the default index is 0. So that for single options, users are not recommended to specify the index, because the default index is fit for returning parameter from the queue
Plus: queue need support operator of [<index>], to return the specific index of item without any change of the queue.

4.5.2.1	arg: int index=0
specify the index, default is 0.
4.5.3	+actived()
return true/false of the option is detected on command line, this function will return the active field directly.
 

